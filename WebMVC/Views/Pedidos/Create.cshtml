@model DTOs.PedidoDTO
@{
    ViewData["Title"] = "Crear Pedido";
}

<h1 class="text-center my-4 animate__animated animate__fadeInDown">
    <i class="bi bi-clipboard-plus"></i> Pedido
</h1>

<div class="container">
    <form asp-action="Create" id="pedidoForm" novalidate>
        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

        <!-- Datos del Pedido -->
        <div class="mb-3 visually-hidden">
            <label asp-for="OrderDate" class="form-label">
                <i class="bi bi-calendar-check"></i> Fecha de Pedido
            </label>
            <input asp-for="OrderDate" class="form-control" type="date" />
            <span asp-validation-for="OrderDate" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Customer" class="form-label">
                <i class="bi bi-person"></i> Cliente
            </label>
            <input asp-for="Customer" class="form-control" placeholder="Ingrese el nombre del cliente" />
            <span asp-validation-for="Customer" class="text-danger"></span>
        </div>

        <hr />
        <h4>Artículos del Pedido</h4>
        <div id="lineasContainer">
            <!-- Aquí se agregarán dinámicamente las líneas -->
        </div>
        <div class="mb-3 text-center">
            <button type="button" class="btn btn-outline-success" id="addLineaBtn">
                <i class="bi bi-plus text-center"></i> Agregar Artículo
            </button>
        </div>
        <!-- Total se calcula automáticamente -->
        <div class="mb-3">
            <label class="form-label">
                <i class="bi bi-cash-stack"></i> Total
            </label>
            <input type="text" id="pedidoTotal" name="Total" class="form-control" readonly value="0" />
        </div>
        <div class="d-grid">
            <button type="submit" class="btn btn-outline-success" id="submitBtn">
                <i class="bi bi-save"></i> Confirmar
            </button>
        </div>
    </form>
</div>

<!-- Plantilla oculta para línea de pedido -->
<div id="lineaTemplate" class="d-none">
    <div class="card mb-3 lineaPedido">
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <!-- Selección del artículo -->
                <div class="col-md-4">
                    <label class="form-label">
                        <i class="bi bi-card-text"></i> Artículo
                    </label>
                    <select class="form-select articleSelect" name="Lines[][ArticleId]" required>
                        <option value="">Seleccione un artículo</option>
                        @foreach (var articulo in ViewBag.Articulos)
                        {
                            <option value="@articulo.Id"
                            data-minimum="@articulo.MinimumPurchase"
                            data-sale="@articulo.SalePrice"
                            data-unit="@articulo.UnitSalePrice"
                            data-weight="@articulo.IsSoldByWeight"
                            data-img="@articulo.ImageUrl">
                                @articulo.Name
                            </option>
                        }
                    </select>
                    <span class="text-danger field-validation-valid" data-valmsg-for="Lines[][ArticleId]" data-valmsg-replace="true"></span>
                </div>
                <!-- Cantidad -->
                <div class="col-md-2" id="quantityContainer">
                    <label class="form-label">
                        <i class="bi bi-sort-numeric-up"></i> Cantidad
                    </label>
                    <input type="number" class="form-control quantityInput" name="Lines[][Quantity]" min="1" value="1" required />
                    <span class="text-danger field-validation-valid" data-valmsg-for="Lines[][Quantity]" data-valmsg-replace="true"></span>
                </div>
                <!-- Peso (para artículos vendidos por peso) -->
                <div class="col-md-2" id="weightContainer" style="display: none;">
                    <label class="form-label">
                        <i class="bi bi-weight"></i> Peso (kg)
                    </label>
                    <input type="number" class="form-control weightInput" name="Lines[][Weight]" min="0" step="0.1" value="0" />
                    <span class="text-danger field-validation-valid" data-valmsg-for="Lines[][Weight]" data-valmsg-replace="true"></span>
                </div>
                <!-- Precio Unitario (calculado) -->
                <div class="col-md-2">
                    <label class="form-label">
                        <i class="bi bi-cash"></i> Precio Unitario
                    </label>
                    <input type="text" class="form-control unitPriceInput" name="Lines[][UnitPrice]" readonly value="0.00" />
                </div>
                <!-- Subtotal (calculado) -->
                <div class="col-md-2">
                    <label class="form-label">
                        <i class="bi bi-calculator"></i> Subtotal
                    </label>
                    <input type="text" class="form-control subtotalInput" readonly value="0.00" />
                </div>
                <!-- Botón para eliminar la línea -->
                <div class="col-md-2 text-center">
                    <button type="button" class="btn btn-danger removeLineaBtn" title="Eliminar Artículo">
                        <i class="bi bi-trash3"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");

    }
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Función para agregar una nueva línea
        function addLinea() {
            var template = document.getElementById('lineaTemplate').innerHTML;
            var container = document.getElementById('lineasContainer');
            var div = document.createElement('div');
            div.innerHTML = template;
            container.appendChild(div.firstElementChild);

            var nuevaLinea = container.lastElementChild;
            attachLineaEvents(nuevaLinea);

            // Inicializar Select2 en el select de artículos
            var articleSelect = nuevaLinea.querySelector('.articleSelect');
            $(articleSelect).select2({
                placeholder: "Seleccione un artículo",
                allowClear: true,
                templateResult: formatArticle,
                templateSelection: formatArticleSelection
            });
        }

        // Evitar el comportamiento predeterminado del botón de agregar línea
        document.getElementById('addLineaBtn').addEventListener('click', function (event) {
            event.preventDefault();
            addLinea();
        });

        // Función para enviar el formulario cuando se hace clic en "Confirmar"
        document.getElementById('submitBtn').addEventListener('click', function (event) {
            event.preventDefault();

            var isValid = true;
            document.querySelectorAll('.lineaPedido').forEach(function(linea) {
                var articleSelect = linea.querySelector('.articleSelect');
                var quantityInput = linea.querySelector('.quantityInput');
                var weightInput = linea.querySelector('.weightInput');
                // Si se vende por peso, usaremos el campo de peso; de lo contrario, la cantidad
                var isSoldByWeight = articleSelect.selectedOptions[0] && articleSelect.selectedOptions[0].getAttribute('data-weight') === 'true';

                if (!articleSelect.value) {
                    isValid = false;
                    Swal.fire({
                        icon: 'warning',
                        title: 'Datos incompletos',
                        text: 'Por favor, seleccione un artículo.',
                        confirmButtonColor: '#d33',
                        confirmButtonText: 'Aceptar'
                    });
                } else if (isSoldByWeight) {
                    if (parseFloat(weightInput.value) <= 0) {
                        isValid = false;
                        Swal.fire({
                            icon: 'warning',
                            title: 'Peso requerido',
                            text: 'El artículo requiere peso, por favor ingréselo.',
                            confirmButtonColor: '#d33',
                            confirmButtonText: 'Aceptar'
                        });
                    }
                } else {
                    if (parseFloat(quantityInput.value) <= 0) {
                        isValid = false;
                        Swal.fire({
                            icon: 'warning',
                            title: 'Datos incompletos',
                            text: 'La cantidad debe ser mayor a 0.',
                            confirmButtonColor: '#d33',
                            confirmButtonText: 'Aceptar'
                        });
                    }
                }
            });

            if (isValid) {
                var formData = new FormData(document.getElementById('pedidoForm'));

                $.ajax({
                    url: '@Url.Action("Create", "Pedidos")',
                    method: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Pedido Creado',
                            text: 'El pedido ha sido creado exitosamente.',
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'Aceptar'
                        }).then(() => {
                            window.location.href = '@Url.Action("Index", "Pedidos")';
                        });
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error al crear el pedido',
                            text: 'Hubo un problema al intentar crear el pedido. Intente nuevamente.',
                            confirmButtonColor: '#d33',
                            confirmButtonText: 'Aceptar'
                        });
                    }
                });
            }
        });

        // Función para mostrar imagen y texto en las opciones del select
        function formatArticle(article) {
            if (!article.id) { return article.text; }
            var imgUrl = $(article.element).data('img');
            if (!imgUrl) { return article.text; }
            var $article = $(`
                <span>
                    <img src="${imgUrl}" style="width: 40px; height: 40px; margin-right: 10px;" />
                    ${article.text}
                    <div class="small text-muted" style="margin-top: 5px;">Mínimo: ${$(article.element).data('minimum')}</div>
                </span>
            `);
            return $article;
        }

        // Función para mostrar el artículo seleccionado
        function formatArticleSelection(article) {
            if (!article.id) { return article.text; }
            var imgUrl = $(article.element).data('img');
            if (!imgUrl) { return article.text; }
            var $article = $(`
                <span>
                    <img src="${imgUrl}" style="width: 20px; height: 20px; margin-right: 5px;" />
                    ${article.text}
                </span>
            `);
            return $article;
        }

        // Función para recalcular el precio unitario y subtotal de una línea
        function recalcLinea(linea) {
            var articleSelect = linea.querySelector('.articleSelect');
            var quantityInput = linea.querySelector('.quantityInput');
            var unitPriceInput = linea.querySelector('.unitPriceInput');
            var subtotalInput = linea.querySelector('.subtotalInput');

            var selectedOption = articleSelect.options[articleSelect.selectedIndex];
            if (!selectedOption || selectedOption.value === "") {
                unitPriceInput.value = "0.00";
                subtotalInput.value = "0.00";
                return;
            }

            // Obtener datos del artículo
            var minimum = parseInt(selectedOption.getAttribute("data-minimum"));
            var salePrice = parseFloat(selectedOption.getAttribute("data-sale"));
            var unitPrice = parseFloat(selectedOption.getAttribute("data-unit"));
            var isSoldByWeight = selectedOption.getAttribute("data-weight") === "true";
            var quantity = parseFloat(quantityInput.value) || 0;

            if (isSoldByWeight) {
                unitPrice = salePrice;
            } else {
                unitPrice = quantity >= minimum ? salePrice : unitPrice;
            }

            unitPriceInput.value = unitPrice.toFixed(2);
            subtotalInput.value = (unitPrice * quantity).toFixed(2);
        }

        // Función para recalcular el total del pedido
        function recalcTotal() {
            var total = 0;
            document.querySelectorAll('.subtotalInput').forEach(function(subInput) {
                total += parseFloat(subInput.value) || 0;
            });
            document.getElementById('pedidoTotal').value = total.toFixed(2);
        }

        // Función para verificar si un artículo ya está en otra línea
        function isArticleAlreadySelected(articleId) {
            var existingArticles = document.querySelectorAll('.articleSelect');
            return Array.from(existingArticles).some(select => select.value === articleId);
        }

        // Función para asignar eventos a una línea
        function attachLineaEvents(linea) {
            var articleSelect = linea.querySelector('.articleSelect');
            var quantityInput = linea.querySelector('.quantityInput');

            articleSelect.addEventListener('change', function() {
                // Verificar si ya existe el artículo en otra línea
                if (isArticleAlreadySelected(articleSelect.value)) {
                    Swal.fire({
                        icon: "warning",
                        title: "Artículo duplicado",
                        text: "Este artículo ya ha sido agregado al pedido.",
                        confirmButtonColor: "#d33"
                    });
                    articleSelect.value = "";
                    $(articleSelect).trigger('change');
                    return;
                }

                var selectedOption = articleSelect.options[articleSelect.selectedIndex];
                var isSoldByWeight = selectedOption.getAttribute("data-weight") === "true";
                var quantityContainer = linea.querySelector('#quantityContainer');
                var weightContainer = linea.querySelector('#weightContainer');
                var weightInput = linea.querySelector('.weightInput');

                if (isSoldByWeight) {
                    weightContainer.style.display = 'block';
                    quantityContainer.style.display = 'none';
                    weightInput.value = 1; // Establecer peso por defecto
                } else {
                    weightContainer.style.display = 'none';
                    quantityContainer.style.display = 'block';
                    quantityInput.value = 1; // Establecer cantidad por defecto
                }

                recalcLinea(linea);
                recalcTotal();
            });

            quantityInput.addEventListener('input', function() {
                recalcLinea(linea);
                recalcTotal();
            });
        }

        // Inicializar una línea por defecto al cargar la página
        window.addEventListener('load', function () {
            addLinea();
        });
    </script>
}
