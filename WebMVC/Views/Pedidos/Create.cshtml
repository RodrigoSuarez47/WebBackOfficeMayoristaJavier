@model DTOs.PedidoDTO
@{
    ViewData["Title"] = "Crear Pedido";
}

<h1 class="text-center my-4">
    <i class="bi bi-clipboard-plus"></i> Pedido
</h1>

<div class="container">
    <form asp-action="Create" id="pedidoForm" novalidate>
        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

        <!-- Datos del Pedido -->
        <div class="mb-3 visually-hidden">
            <input asp-for="OrderDate" type="hidden" />
        </div>

        <div class="mb-3">
            <label asp-for="Customer" class="form-label">
                <i class="bi bi-person"></i> Cliente
            </label>
            <input asp-for="Customer" class="form-control" placeholder="Ingrese el nombre del cliente" />
            <span asp-validation-for="Customer" class="text-danger"></span>
        </div>

        <hr />
        <h4>Artículos del Pedido</h4>
        <div id="lineasContainer">
            <!-- Aquí se agregarán dinámicamente las líneas -->
        </div>
        <div class="mb-3 text-center">
            <button type="button" class="btn btn-outline-success" id="addLineaBtn">
                <i class="bi bi-plus text-center"></i> Agregar Artículo
            </button>
        </div>

        <div class="mb-3">
            <label class="form-label">
                <i class="bi bi-cash-stack"></i> Total
            </label>
            <input asp-for="Total" type="text" id="pedidoTotal" class="form-control" readonly value="0" />
        </div>

        <div class="d-grid">
            <button type="submit" class="btn btn-outline-success" id="submitBtn">
                <i class="bi bi-save"></i> Confirmar
            </button>
        </div>
    </form>
</div>

<!-- Plantilla oculta para línea de pedido -->
<div id="lineaTemplate" class="d-none">
    <div class="card mb-3 lineaPedido" data-linea-index="">
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <!-- Selección del artículo -->
                <div class="col-md-4">
                    <label class="form-label">
                        <i class="bi bi-card-text"></i> Artículo
                    </label>
                    <select class="form-select articleSelect" name="Lines[0].ArticleId" required>
                        <option value="">Seleccione un artículo</option>
                        @foreach (var articulo in ViewBag.Articulos)
                        {
                            <option value="@articulo.Id"
                                    data-minimum="@articulo.MinimumPurchase"
                                    data-sale="@articulo.SalePrice"
                                    data-unit="@articulo.UnitSalePrice"
                                    data-weight="@articulo.IsSoldByWeight"
                                    data-stock="@articulo.Stock">
                                @articulo.Name
                            </option>
                        }
                    </select>
                    <span class="text-danger field-validation-valid" data-valmsg-replace="true"></span>
                </div>

                <!-- Cantidad -->
                <div class="col-md-2 quantityContainer">
                    <label class="form-label">
                        <i class="bi bi-sort-numeric-up"></i> Cantidad
                    </label>
                    <input type="number" class="form-control quantityInput" name="Lines[0].Quantity" min="1" value="1" required />
                    <span class="text-danger field-validation-valid" data-valmsg-replace="true"></span>
                </div>

                <!-- Peso (para artículos vendidos por peso) -->
                <div class="col-md-2 weightContainer" style="display: none;">
                    <label class="form-label">
                        <i class="bi bi-weight"></i> Peso (kg)
                    </label>
                    <input type="number" class="form-control weightInput" name="Lines[0].Weight" min="0.1" step="0.1" value="1" />
                    <span class="text-danger field-validation-valid" data-valmsg-replace="true"></span>
                </div>

                <!-- Precio Unitario -->
                <div class="col-md-2">
                    <label class="form-label">
                        <i class="bi bi-cash"></i> Precio Unitario
                    </label>
                    <input type="text" class="form-control unitPriceInput" name="Lines[0].UnitPrice" readonly value="0.00" />
                </div>

                <!-- Subtotal -->
                <div class="col-md-2">
                    <label class="form-label">
                        <i class="bi bi-calculator"></i> Subtotal
                    </label>
                    <input type="text" class="form-control subtotalInput" readonly value="0.00" />
                </div>

                <!-- Botón para eliminar la línea -->
                <div class="col-md-2 text-center">
                    <button type="button" class="btn btn-danger removeLineaBtn" title="Eliminar Artículo">
                        <i class="bi bi-trash3"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        /* Estilos optimizados para Select2 */
        .select2-container--default .select2-selection--single {
            height: 38px;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            padding: 5px;
        }

            .select2-container--default .select2-selection--single .select2-selection__rendered {
                display: flex !important;
                align-items: center;
                line-height: normal;
            }

        .select2-selection__arrow {
            height: 36px !important;
        }

        /* Estilos para las opciones */
        .article-option {
            display: flex;
            align-items: center;
            padding: 5px 0;
            min-height: 50px;
        }

        .article-image-container {
            width: 40px;
            height: 40px;
            margin-right: 10px;
            flex-shrink: 0;
        }

        .article-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 4px;
        }

        .article-info {
            flex: 1;
            min-width: 0;
        }

        .article-name {
            font-weight: bold;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .article-details {
            font-size: 0.75em;
            color: #6c757d;
        }

        .no-stock {
            color: #dc3545;
            font-weight: bold;
        }

        /* Cache de imágenes */
        .image-cache {
            position: absolute;
            opacity: 0;
            pointer-events: none;
        }
    </style>

    <div class="image-cache" id="imageCache"></div>

    <script>
        // Cache para imágenes ya cargadas
        var imageCache = {};

        $(document).ready(function () {
            // Precargar imágenes de los artículos disponibles
        @foreach (var articulo in ViewBag.Articulos)
        {
            if (!string.IsNullOrEmpty(articulo.ImageUrl))
            {
                <text>
                                preloadImage('@articulo.ImageUrl');
                </text>
            }
        }

            let lineaCounter = 0;
            addLinea();

            function preloadImage(url) {
                if (!imageCache[url]) {
                    var img = new Image();
                    img.src = url;
                    img.onload = function() {
                        imageCache[url] = true;
                    };
                    img.onerror = function() {
                        console.error(`Error loading image: ${url}`);
                    };
                    $('#imageCache').append(img);
                }
            }

            function formatArticleResult(article) {
                if (!article.id) return article.text;

                var $option = $(article.element);
                var imageUrl = $option.data('img') ? $option.data('img') : '';
                var name = $option.text();
                var minimum = $option.data('minimum');
                var stock = $option.data('stock');
                var salePrice = $option.data('sale');
                var unitPrice = $option.data('unit');

                var stockText = stock > 0 ?
                    `Stock: ${stock}` :
                    `<span class="no-stock">SIN STOCK</span>`;

                return `
                    <div class="article-option">
                        <div class="article-image-container">
                            <img src="${imageUrl}" class="article-image"
                                 onerror="this.onerror=null;this.src='https://via.placeholder.com/50';"
                                 loading="lazy">
                        </div>
                        <div class="article-info">
                            <span class="article-name">${name}</span>
                            <span class="article-details">
                                Mínimo: ${minimum} | ${stockText} |
                                Precio: $${salePrice} (Unitario: $${unitPrice})
                            </span>
                        </div>
                    </div>`;
            }

            function formatArticleSelection(article) {
                if (!article.id) return article.text;

                var $option = $(article.element);
                var imageUrl = $option.data('img') ? $option.data('img') : '';
                var name = $option.text();

                return `
                    <div class="article-option">
                        <div class="article-image-container" style="width:30px;height:30px">
                            <img src="${imageUrl}" class="article-image"
                                 style="width:30px;height:30px"
                                 onerror="this.onerror=null;this.src='https://via.placeholder.com/30';">
                        </div>
                        <span class="article-name">${name}</span>
                    </div>`;
            }

            function addLinea() {
                var template = $('#lineaTemplate').html();
                var container = $('#lineasContainer');

                template = template.replace(/\[0\]/g, `[${lineaCounter}]`);

                var div = $('<div>').html(template);
                container.append(div.children().first());

                var nuevaLinea = container.children().last();
                nuevaLinea.attr('data-linea-index', lineaCounter);

                nuevaLinea.find('.articleSelect').select2({
                    templateResult: formatArticleResult,
                    templateSelection: formatArticleSelection,
                    escapeMarkup: function(m) { return m; },
                    placeholder: "Seleccione un artículo",
                    allowClear: false,
                    width: '100%',
                    dropdownParent: nuevaLinea
                });

                nuevaLinea.find('.articleSelect option').each(function() {
                    var stock = $(this).data('stock');
                    if (stock <= 0) {
                        $(this).prop('disabled', true);
                    }
                });

                attachLineaEvents(nuevaLinea);
                lineaCounter++;
            }

            // Función para eliminar una línea
            function removeLinea(button) {
                var linea = button.closest('.lineaPedido');
                if ($('.lineaPedido').length > 1) {
                    linea.remove();
                    recalcTotal();
                    reindexLines();
                } else {
                    Swal.fire({
                        icon: 'warning',
                        title: 'No puede eliminar',
                        text: 'Debe haber al menos un artículo en el pedido',
                        confirmButtonText: 'Entendido'
                    });
                }
            }

            // Reindexar las líneas después de eliminar
            function reindexLines() {
                $('.lineaPedido').each(function(index) {
                    $(this).attr('data-linea-index', index);
                    $(this).find('[name^="Lines"]').each(function() {
                        var name = $(this).attr('name').replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', name);
                    });
                });
            }

            // Función para recalcular una línea con la nueva lógica de precios
            function recalcLinea(linea) {
                var articleSelect = linea.find('.articleSelect');
                var selectedOption = articleSelect.find('option:selected');
                var quantityInput = linea.find('.quantityInput');
                var unitPriceInput = linea.find('.unitPriceInput');
                var subtotalInput = linea.find('.subtotalInput');

                if (!selectedOption.val()) {
                    unitPriceInput.val("0.00");
                    subtotalInput.val("0.00");
                    return;
                }

                var minimum = parseInt(selectedOption.data('minimum'));
                var salePrice = parseFloat(selectedOption.data('sale'));
                var unitSalePrice = parseFloat(selectedOption.data('unit'));
                var quantity = parseFloat(quantityInput.val()) || 0;
                var stock = parseInt(selectedOption.data('stock'));

                // Validar stock
                if (quantity > stock) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Stock insuficiente',
                        text: `No hay suficiente stock para ${selectedOption.text()}. Stock disponible: ${stock}`,
                        confirmButtonText: 'Entendido'
                    });
                    quantityInput.val(stock);
                    quantity = stock;
                }

                // Calcular precio unitario según cantidad mínima
                var unitPrice = quantity < minimum ? unitSalePrice : salePrice;
                var subtotal = unitPrice * quantity;

                unitPriceInput.val(unitPrice.toFixed(2));
                subtotalInput.val(subtotal.toFixed(2));
            }

            // Función para recalcular el total
            function recalcTotal() {
                var total = 0;
                $('.subtotalInput').each(function() {
                    total += parseFloat($(this).val()) || 0;
                });
                $('#pedidoTotal').val(total.toFixed(2));
            }

            // Asignar eventos a una línea
            function attachLineaEvents(linea) {
                var articleSelect = linea.find('.articleSelect');
                var quantityInput = linea.find('.quantityInput');

                articleSelect.on('change', function() {
                    var selectedOption = $(this).find('option:selected');
                    var stock = parseInt(selectedOption.data('stock'));

                    // Si no hay stock, mostrar advertencia
                    if (stock <= 0) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Sin stock',
                            text: 'Este artículo no tiene stock disponible',
                            confirmButtonText: 'Entendido'
                        });
                    }

                    recalcLinea(linea);
                    recalcTotal();
                });

                quantityInput.on('input', function() {
                    recalcLinea(linea);
                    recalcTotal();
                });
            }

            // Evento para agregar línea
            $('#addLineaBtn').click(function(e) {
                e.preventDefault();
                addLinea();
            });

            // Evento para eliminar línea
            $(document).on('click', '.removeLineaBtn', function() {
                removeLinea($(this));
            });

            // Validación antes de enviar
            $('#pedidoForm').submit(function(e) {
                var isValid = true;
                var hasValidLines = false;
                var stockErrors = [];

                $('.lineaPedido').each(function() {
                    var linea = $(this);
                    var articleSelect = linea.find('.articleSelect');
                    var selectedOption = articleSelect.find('option:selected');
                    var quantityInput = linea.find('.quantityInput');
                    var stock = parseInt(selectedOption.data('stock'));

                    // Validar artículo seleccionado
                    if (!articleSelect.val()) {
                        isValid = false;
                        linea.find('.articleSelect').addClass('is-invalid');
                    } else {
                        linea.find('.articleSelect').removeClass('is-invalid');
                        hasValidLines = true;

                        // Validar stock
                        var quantity = parseInt(quantityInput.val());
                        if (quantity > stock) {
                            stockErrors.push(`<li>${selectedOption.text()} (Stock: ${stock}, Pedido: ${quantity})</li>`);
                            isValid = false;
                            quantityInput.addClass('is-invalid');
                        } else {
                            quantityInput.removeClass('is-invalid');
                        }
                    }

                    // Validar cantidad
                    if (!quantityInput.val() || parseInt(quantityInput.val()) <= 0) {
                        isValid = false;
                        quantityInput.addClass('is-invalid');
                    } else {
                        quantityInput.removeClass('is-invalid');
                    }
                });

                if (!hasValidLines) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Debe agregar al menos un artículo válido',
                        confirmButtonText: 'Entendido'
                    });
                    isValid = false;
                }

                if (stockErrors.length > 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Stock insuficiente',
                        html: `Los siguientes artículos no tienen suficiente stock:<ul>${stockErrors.join('')}</ul>`,
                        confirmButtonText: 'Entendido'
                    });
                    isValid = false;
                }

                if (!isValid) {
                    e.preventDefault();
                }
            });
        });
    </script>
}

